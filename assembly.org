#+TITLE: Linguagem Assembly

* O quê é Assembly?
"De forma resumida Assembly é uma notação em formato de texto das instruções do código de máquina de uma determinada arquitetura."
- Livro [[https://mentebinaria.gitbook.io/assembly][Assembly, Mente Binária]].

* Por Que
** Engenharia Reversa
    Somente é possível saber como um software realmente funciona, sem o código fonte, usando engenharia reversa.
** Otimização de Código

** Tarefas de baixo nível
    Algumas tarefas, como por exemplo instruções expecíficas de um processador para "matar" um processo, não podem ser usadas em uma
	linguagem de baixo nível comum como o C.
** C & Assembly
    Também existe a incrível possíbilidade de escrevermos assembly /inline/, ou seja, escrever assembly dentro de um código em C.
	Isto nos dá uma gama de possíbilidades que antes não eram possíveis por causa que, como falamos anteriormente, não é possível
	chamar certas instruções do processador com o C "puro".

* Hello World
Como o assembly é uma linguagem de *extremo baixo nível*, suas instruções mudam de máquina para máquina. Aqui, irei mostrar um exemplo de
Hello World em Assembly Intel x86_64.
#+BEGIN_SRC assembly
global _start

section .text

_start:
  mov rax, 1       ; Chama a "syscall" write()
  mov rdi, 1       ; Indica onde sera a saída, neste caso, stdin 
  mov rsi, msg     ; Indica a mensagem a ser mostrada
  mov rdx, msglen  ; Indica o tamanho da mensagem 
  syscall          ; Termina a chamada 

  mov rax, 60       
  mov rdi, 0        
  syscall           

section .rodata
  msg: db "Hello, world!", 10
  msglen: equ $ - msg
#+END_SRC
Como podemos ver, é um hello world muito complexo, mas, este é o preço a se pagar por uma linguagem de baíxo nível.
agora, irei explícar o processo de compilação: Diferente de um compilador comum como o GCC, o assembly é compilado diferentemente
dependendo de cada máquina, e o processo de "linkagem" é manual; neste caso, irei usar o ~ld~, do projeto GNU, já que está disponível
para a maior parte dos sístemas UNIX.

** Compilando:
~nasm -f elf64 -o hello.o hello.s~
*** Linkando:
~ld -o hello hello.o~
** Rodando:
~./hello~
